# Name of pipeline
name: Build and Deploy to GCP

run-name: Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}

# Configure triggers
on:
  # Trigger on a push
  push:
    # But only for the listed branches
    branches:
      # This pipeline will run whenever changes are pushed to the 'main' branch.
      - main  
  
  # Trigger on a pull request    
  pull_request:
    # But only for the listed branches
    branches:
      # This pipeline will run whenever changes are pushed to the 'main' branch.
      - main  

jobs:
  deploy_to_main:
    # The pipeline will execute on the latest version of Ubuntu.
    runs-on: ubuntu-latest  

    steps:
    - name: Checkout code
      # Clone the repository from GitHub.
      # Change directory to the cloned repository.
      run: |
        git clone https://github.com/${{ github.repository_owner }}/BuildDeployPipelineDemo.git  
        cd BuildDeployPipelineDemo  

    - name: Install .NET SDK
      # Download the .NET SDK installation script.
      # Make the script executable.
      # Run the script to install .NET SDK version 9.0.201.
      # Add .NET SDK to the system path.
      # echo "::add-path::$(HOME)/.dotnet" 
      run: |
        wget https://dot.net/v1/dotnet-install.sh  
        chmod +x dotnet-install.sh  
        ./dotnet-install.sh --version 9.0.201  
        echo "$HOME/.dotnet" >> "$GITHUB_PATH" 

    - name: Restore dependencies
      # Restore the project dependencies specified in the project file.
      run: |
        pwd
        ls -la
        cd BuildDeployPipelineDemo
        dotnet restore  

    - name: Build
      # Build the project in Release configuration.
      run: |
        pwd
        ls -la
        cd BuildDeployPipelineDemo      
        dotnet build --configuration Release  

    - name: Test
      # Run tests and collect code coverage data.
      run: |
        pwd
        ls -la
        cd BuildDeployPipelineDemo      
        dotnet test --configuration Release --collect:"XPlat Code Coverage"  

    - name: Publish
      # Navigate to project directory
      # Publish the project, outputting the compiled files to the 'publish' directory.
      run: |
        pwd
        ls -la
        cd BuildDeployPipelineDemo      
        dotnet publish --configuration Release --output ./publish  

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        service_account_key: ${{ secrets.GCP_DEPLOY_SA_KEY }}
        export_default_credentials: true

    - name: Verify gcloud installation
      run: gcloud --version

    - name: Debug gcloud installation
      run: |
        which gcloud

    - name: List installed packages
      run: dpkg -l | grep google-cloud-sdk

    - name: List binaries in PATH
      run: ls -la /usr/lib/google-cloud-sdk/bin 

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_DEPLOY_SA_KEY }}

    - name: Set up Cloud SDK
      # Set the GCP project ID using GitHub secrets.
      run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}  

    - name: Deploy to GCP
      # Deploy the application to GCP using the 'app.yaml' configuration file.
      run: gcloud app deploy ./publish/app.yaml --quiet  
